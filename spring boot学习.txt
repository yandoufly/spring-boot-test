spring boot 整合mybatis 扫描entity包方式：
	方式一：在application.properties中配置：mybatis.type-aliases-package=com.yjy.entity
	方式二：在Application类上配置：@MapperScan("com.yjy.mapper")

spring boot 配置多数据源方式：略


自定义properties的Spring Boot配置：
在resource文件夹中创建application.properties或application.yml文件
application.yml配置如下：
server:
	port: 80
	tomcat:
		uri-encoding: UTF-8

application.properties配置如下：
server.port = 80
server.tomcat.uri-enconding = UTF-8

spring boot 有什么好处：
1）配置web.xml，加载spring和spring mvc
2）配置数据库连接、配置spring事务
3）配置加载配置文件的读取，开启注解
4）配置日志文件

json 接口开发：
@RestController //默认类中的方法都会以json的格式返回
public class HelloWorldController {
    @RequestMapping("/getUser")
    public User getUser() {
    	User user=new User();
    	user.setUserName("小明");
    	user.setPassWord("xxxx");
        return user;
    }
}

自定义Filter开发：
1）实现Filter接口，实现Filter方法
2）添加@Configuration注解，将自定义Filter加入过滤链

变量表达式和星号表达有什么区别吗？
<div th:object="${session.user}">
	<p>Name: <span th:text="*{firstName}">Sebastian</span>.</p>
	<p>Surname: <span th:text="*{lastName}">Pepper</span>.</p>
	<p>Nationality: <span th:text="*{nationality}">Saturn</span>.</p>
</div>
这是完全等价于：
<div th:object="${session.user}">
  <p>Name: <span th:text="${session.user.firstName}">Sebastian</span>.</p>
  <p>Surname: <span th:text="${session.user.lastName}">Pepper</span>.</p>
  <p>Nationality: <span th:text="${session.user.nationality}">Saturn</span>.</p>
</div>


application.properties配置文件：或者application.yml文件(推荐)
server.port=8088
server.context-path=/FirstDemo  //添加项目前缀

在application.yml文件配置信息后在controller层读取：
1）cupSize: 9
@Value("${cupSize}")
private String cupSize;

2）content: "cupSize: ${cupSize}, age: ${age}"
@Value("${cupSize}")
private String content;

3）girl:
	cupSIze: B
	age: 18

新建类：
@Component	
@ConfigurationProperties(prefix = "girl")
public class GirlProperties {
	private String cupSize;
	private Integer age;
	get/set方法
}
然后再controller层：
@Autowired
private GirlProperties girlProperties;

配置多个配置文件，然后再application.yml中映射到实际用到的配置文件


Controller的使用：
@Controller //处理http请求
@RestController //原来返回json需要@ResponseBody配合@Controller
@RequestMapping //配置url映射
@PathVariable //获取url中的数据
@RequestParam //获取请求参数的值
@GetMapping/@PostMapping //组合注解

@RequestMapping(value={"/hello", "/hi"}, method=RequestMethod.Get)
say(@RequestParam(value = "id", required = false, defaultValue = "0") Integer id){ ... }

postMan工具，用来测试post/get请求的url


操作数据库：
1 引入jpa
2 在application.yml编写数据库配置文件
3 新建实体类Girl
4 新建接口GirlRepository,继承JpaRepository<Girl, Integer>
5 编写GirlController
@Autowired
private GirlRepository girlRepository;
girlRepository.findAll(); //得到全部数据
girlRepository.save(girl); //保存或更新数据
girlRepository.findOne(id); //查询一条数据
girlRepository.delete(id); //删除数据


事务管理:
新建service层：
@Transactional //添加事务控制(要么全部执行，要么全部不执行)
public void insertTwo(){...}


表单验证
@Entity
public class girl {
	@Id
	@GeneratedValue
	private Integer id;
	private String cupSize;
	@Min(value = 18, message = "未成年少女禁止入内")
	private Integer age;
	get/set方法
}
GilrController {
	@PostMapping(value = "/girl")
	public Gilr girlAdd(@Valid Girl girl, BindingResult bindingResult){
		if(bindingResult.hasErrors()) {
			System.out.println(bindingResult.getFieldError().getDefaultMessage());
			return null;
		}
	}
}

AOP统一处理请求日志
AOP是一种变成范式；面向切面(AOP)、面向对象(OOP)、面向过程(POP)

收到HttpRequest请求-->记录请求-->处理网络请求-->生成HttpResponse-->记录回复
收到数据库操作请求-->记录请求-->增删改查-->生成处理结果-->记录回复

新建HttpAspect类：
@Aspect
@Component
public class HttpAspect {
	private final static Logger logger = LoggerFactory.getLogger(HttpAspect.class); //参数为所在类的类名

	@Before("execution(public * com.yjy.controller.GirlController.*(..))")
	public void log() {
		logger.info("111111111");
	}

	@After("execution(public * com.yjy.controller.GirlController.*(..))")
	public void doAfter(){
		logger.info("222222222");
	}
}

优化：
@Pointcut("execution(public * com.yjy.controller.GirlController.*(..))")
public void log(){ }

@Before("log()")
public void doBefore(){...}

@After("log()")
public void doAfter(){...}

@AfterReturning(returning = "object", pointcut = "log()")
public void doAfterReturning(Object object){
	logger.info("response={}", object.toString());
}


2. web综合开发
json开发：
	添加 jackjson 等相关jar包
	配置spring controller扫描
	对接的方法添加@ResponseBody
而spring boot 只需要在类中添加@RestController 即可
自定义Filter：
	实现Filter接口，实现Filter方法
	添加@Configuration 注解，将自定义Filter加入过滤连
自定义Properties：
	在application.properties中：com.neo.title=自定义Properties测试
	在类中定义：@Value("${com.neo.title}") private String title;
log配置输出的地址和输出级别：
	logging.path=/user/local/log
	logging.level.com.favorites=DEBUG
	logging.level.org.springframework.web=INFO
	logging.level.org.hibernate=ERROR

数据库操作：
添加jar包：spring-boot-starter-data-jpa、mysql-connector-java
添加配置文件：
spring.datasource.url=jdbc:mysql://localhost:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql= true

thymeleaf模板：
Thymeleaf是一款用于渲染XML/XHTML/HTML5内容的模板引擎
Thymeleaf最大的特点是能够直接在浏览器中打开并正确显示模板页面，而不需要启动整个Web应用。

Gradle 构建工具：
spring 项目建议使用Gradle进行构建项目，相比maven来讲 Gradle更简洁，而且gradle更时候大型复杂项目的构建。
gradle吸收了maven和ant的特点而来，不过目前maven仍然是Java界的主流

WebJars 介绍：
WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。



3. redis的使用：
概念不懂？？？？
分布式系统中，sessiong共享有很多的解决方案



4. thymeleaf的使用：
介绍：
1）浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。
2）它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰
3）提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能
变量表达式：
<span th:text="${book.author.name}">  
<li th:each="book : ${books}">  
被指定的object由th:object属性定义：
<div th:object="${book}"> 
	<span th:text="*{title}">...</span> 
</div>

URL表达式:
@{/order/details(id=${orderId})}
@{../documents/report}
<form th:action="@{/createOrder}">
<a href="main.html" th:href="@{/main}">

变量表达式和星号表达区别：
星号语法评估在选定对象上表达，而不是整个上下文，选定对象即父标签的值
<div th:object="${session.user}">
    Name: <span th:text="*{firstName}">Sebastian</span> 等价于：<p>Name: <span th:text="${session.user.firstName}">Sebastian</span>
</div>

字符串拼接:<span th:text="|Welcome to our application, ${user.name}!|">
for循环：
  <tr  th:each="collect,iterStat : ${collects}"> 
     <th scope="row" th:text="${collect.id}">1</th>
     <td >
        <img th:src="${collect.webLogo}"/>
     </td>
     <td th:text="${collect.url}">Mark</td>
     <td th:text="${collect.title}">Otto</td>
     <td th:text="${collect.description}">@mdo</td>
     <td th:text="${terStat.index}">index</td>
  </tr>

URL路径：
 <!-- Will produce 'http://localhost:8080/standard/unread' (plus rewriting) -->
 <a  th:href="@{/standard/{type}(type=${type})}">view</a>  


	

5. JPA的使用：
步骤一：继承JpaRepository
public interface UserRepository extends JpaRepository<User, Long> {
}
步骤二：使用默认方法
@Test
public void testBaseQuery() throws Exception {
    User user=new User();
    userRepository.findAll();
    userRepository.findOne(1l);
    userRepository.save(user);
    userRepository.delete(user);
    userRepository.count();
    userRepository.exists(1l);
    // ...
}

自定义简单查询：
User findByUserName(String userName); //按照属性查询
User findByUserNameOrEmail(String username, String email); //添加and、or的等修饰
Long countByUserName(String userName); //统计个数
List<User> findByEmailLike(String email);  //使用like查询
List<User> findByUserNameOrderByEmailDesc(String email); //使用OrderBy

//复杂查询
Page<User> findALL(Pageable pageable);
Page<User> findByUserName(String userName,Pageable pageable); //自定义分页查询

//限制查询
List<User> findFirst10ByLastname(String lastname, Sort sort);
List<User> findTop10ByLastname(String lastname, Pageable pageable);


//自定义SQL查询
@Modifying  //涉及到修改
@Query("update User u set u.userName = ?1 where c.id = ?2")
int modifyByIdAndUserId(String  userName, Long id);
    
@Transactional //对事务支持
@Modifying //涉及到删除
@Query("delete from User where id = ?1")
void deleteByUserId(Long id);
  
@Transactional(timeout = 10)
@Query("select u from User u where u.emailAddress = ?1")
User findByEmailAddress(String emailAddress);

//多表查询
@Query("select h.city as city, h.name as name, avg(r.rating) as averageRating "
        - "from Hotel h left outer join h.reviews r where h.city = ?1 group by h")
Page<HotelSummary> findByCity(City city, Pageable pageable);

@Query("select h.name as name, avg(r.rating) as averageRating "
        - "from Hotel h left outer join h.reviews r  group by h")
Page<HotelSummary> findByCity(Pageable pageable);

异构数据库多源支持：
@Entity  //关系型数据库支持类型
@Document //mongodb支持类型
public class Person {
  …
}


6. mybatis的引入
hibernate：宣称可以不用写一句SQL；所有的sql都用Java代码来生成，有着编程的完整性，发展到最顶端就是spring data jpa这种模式了，基本上根据方法名就可以生成对应的sql了
mybatis：可以灵活调试动态sql；需要各种配置文件、实体类、dao层映射关联、还有一大推其它配置，mybatis-spring-boot-starter就是springboot+mybatis可以完全注解不用配置文件，也可以简单配置轻松上手。
传统企业大都喜欢使用hibernate,互联网行业通常使用mybatis。

加入jar包：mybatis-spring-boot-starter
application.properties添加配置信息：
mybatis.type-aliases-package=com.yjy.entity

spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/test1?useUnicode=true&characterEncoding=utf-8
spring.datasource.username = root
spring.datasource.password = 123456

注解扫描mapper包：
@SpringBootApplication
@MapperScan("com.yjy.mapper") //方法一
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
或者直接在Mapper类上面添加注解@Mapper //方法二

开发Mapper：
 @Select("SELECT * FROM users WHERE id = #{id}")
 UserEntity getOne(Long id);
 注解介绍：
 @Select 是查询类的注解，所有的查询均使用这个
 @Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。
 @Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值
 @Update 负责修改，也可以直接传入对象
 @delete 负责删除

使用#符号和$符号的区别：
// This example creates a prepared statement, something like select * from teacher where name = ?;
@Select("Select * from teacher where name = #{name}")
Teacher selectTeachForGivenName(@Param("name") String name);

// This example creates n inlined statement, something like select * from teacher where name = 'someName';
@Select("Select * from teacher where name = '${name}'")
Teacher selectTeachForGivenName(@Param("name") String name);

在application.properties添加相应配置：
mybatis.config-locations=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml

mybatis多数据源配置：





9. 定时任务
1》加入jar包：spring-boot-starter
2》在启动类添加注解：@EnableScheduling
3》创建任务实现类
 	@Component
	public class SchedulerTask {
	    private int count=0;
	    @Scheduled(cron="*/6 * * * * ?")
	    private void process(){
	        System.out.println("this is scheduler task runing  "+(count++));
	    }

	}
4》启动application类


参数说明：
@Scheduled(cron="0 0/2 * * * ?")  //间隔2分钟,执行任务 
@Scheduled(cron="*/6 * * * * ?") //每隔六秒打印一下内容
@Scheduled(cron = "0 0 16 * * ?") //定义一个按时间执行的定时任务，在每天16:00执行一次
@Scheduled(fixedRate = 6000)  //上一次开始执行时间点之后6秒再执行
@Scheduled(fixedDelay = 6000) //上一次执行完毕时间点之后6秒再执行
@Scheduled(initialDelay=1000, fixedRate=6000)  //第一次延迟1秒后执行，之后按fixedRate的规则每6秒执行一次

cron表达式：
"*" 字符代表所有可能的值
"/" 字符用来指定数值的增量
"?" 字符被用于天(月)和天(星期)两个子表达式，表示不指定值; 当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为"?"
"L" 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写
天（星期）（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）
顺序：秒(0~59) 分(0~59) 时(0~23) 日(0~31) 月(0~11) 天(星期) 年(1970~2099)
0 0 10,14,16 * * ?   //表示每天10点，14点，16点执行
0 0/30 9-17 * * ?  //表示朝九晚五工作时间内每半小时
0 0 12 ? * WED   //表示每个星期三中午12点 
0 0 12 * * ?   //表示每天中午12点触发 
0 15 10 ? * *   //表示每天上午10:15触发 
0 15 10 * * ? 2017 //表示2017年的每天上午10:15触发 
0 15 10 ? * 6L  //表示每月的最后一个星期五上午10:15触发 
